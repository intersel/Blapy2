/**
 * -----------------------------------------------------------------------------------------
 * INTERSEL - 4 citÃ© d'Hauteville - 75010 PARIS
 * RCS PARIS 488 379 660 - NAF 721Z
 *
 * File : BlapySocket.js
 * Blapy2 Socket module for browser usage.
 *
 * -----------------------------------------------------------------------------------------
 * @copyright Intersel 2015-2025
 * @fileoverview Blapy2 Socket module for browser usage.
 * @see {@link https://github.com/intersel/blapy2}
 * @author Corentin NELHOMME - corentin.nelhomme@intersel.fr
 * @version 1.0.1
 * @license DonationWare - see https://github.com/intersel/blapy2/blob/master/LICENSE
 * -----------------------------------------------------------------------------------------
 */
var BlapySocket=function(){"use strict";return class{constructor(e={},t){this.options={url:"ws://localhost:8080",autoConnect:!1,reconnectDelay:3e3,maxReconnectAttempts:10,allowedCommands:["postData","updateBlock","reloadBlock","loadUrl","trigger"],auth:null,clientId:this._generateClientId(),...e},this.ws=null,this.isConnected=!1,this.reconnectAttempts=0,this.reconnectTimer=null,this.blapy=t,this.callbacks={onOpen:[],onClose:[],onError:[],onMessage:[],onReconnect:[]},this.options.autoConnect&&this.connect(),this.blapy.logger.info("BlapySocket initialized (Receive Only)","WebSocket")}connect(){return new Promise((e,t)=>{if(this.isConnected)return this.blapy.logger.warn("deja co"),this.blapy.logger.warn("Already connected to WebSocket","WebSocket"),void e();this.blapy.logger.info(`Connecting to WebSocket: ${this.options.url}`,"WebSocket");try{this.ws=new WebSocket(this.options.url),this.ws.onopen=t=>{this.isConnected=!0,this.reconnectAttempts=0,this._clearReconnectTimer(),this._sendIdentification(),this._triggerCallbacks("onOpen",t),e()},this.ws.onclose=e=>{this.isConnected=!1,this.blapy.logger.warn(`WebSocket closed: ${e.code} - ${e.reason}`,"WebSocket"),this._triggerCallbacks("onClose",e),1e3!==e.code&&this.reconnectAttempts<this.options.maxReconnectAttempts&&this._scheduleReconnect()},this.ws.onerror=e=>{this.blapy.logger.error("WebSocket error occurred","WebSocket"),this._triggerCallbacks("onError",e),this.isConnected||t(new Error("Failed to connect to WebSocket"))},this.ws.onmessage=e=>{this._handleMessage(e)}}catch(n){this.blapy.logger.error(`Failed to create WebSocket connection: ${n.message}`,"WebSocket"),t(n)}})}disconnect(e=1e3,t="Client disconnect"){this._clearReconnectTimer(),this.ws&&this.isConnected&&this.ws.close(e,t),this.isConnected=!1,this.ws=null}on(e,t){this.callbacks[e]?this.callbacks[e].push(t):this.blapy.logger.warn(`Unknown event: ${e}`,"WebSocket")}off(e,t){if(this.callbacks[e]){const n=this.callbacks[e].indexOf(t);n>-1&&this.callbacks[e].splice(n,1)}}getStatus(){return{connected:this.isConnected,url:this.options.url,clientId:this.options.clientId,reconnectAttempts:this.reconnectAttempts}}_sendIdentification(){if(this.ws&&this.isConnected){const t={type:"identify",clientId:this.options.clientId,blapyInstance:this.blapy?.myUIObjectID||"unknown",timestamp:Date.now()};this.options.auth&&(t.auth=this.options.auth);try{this.ws.send(JSON.stringify(t))}catch(e){this.blapy.logger.error(`Error sending identification: ${e.message}`,"WebSocket")}}}_handleMessage(e){try{const t=JSON.parse(e.data);switch(t.type){case"blapy_command":this._handleBlapyCommand(t);break;case"broadcast":this._handleBroadcast(t);break;default:this.blapy.logger.info(`Unhandled message type: ${t.type}`,"WebSocket")}this._triggerCallbacks("onMessage",t)}catch(t){this.blapy.logger.error(`Error parsing message: ${t.message}`,"WebSocket")}}_handleBlapyCommand(e){if(!this.blapy)return void this.blapy.logger.error("No Blapy instance attached, cannot execute command","WebSocket");const{command:t,data:n}=e;if(this.options.allowedCommands.includes(t))try{switch(t){case"postData":this.blapy.myFSM.trigger("postData",n);break;case"updateBlock":this.blapy.myFSM.trigger("updateBlock",n);break;case"reloadBlock":this.blapy.myFSM.trigger("reloadBlock",n);break;case"loadUrl":this.blapy.myFSM.trigger("loadUrl",n);break;case"trigger":n.event&&this.blapy.trigger&&this.blapy.trigger(n.event,n.payload);break;default:this.blapy.logger.warn(`Unknown Blapy command: ${t}`,"WebSocket")}}catch(o){this.blapy.logger.error(o),this.blapy.logger.error(`Error executing command: ${o.message}`,"WebSocket")}else this.blapy.logger.warn(`Command not allowed: ${t}`,"WebSocket")}_handleBroadcast(e){this.blapy&&this.blapy.trigger("BlapySocket_Broadcast",e.data)}_scheduleReconnect(){if(this.reconnectTimer)return;this.reconnectAttempts++;const e=this.options.reconnectDelay*Math.pow(1.5,this.reconnectAttempts-1);this.blapy.logger.info(`Scheduling reconnection attempt ${this.reconnectAttempts} in ${e}ms`,"WebSocket"),this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=null,this.blapy.logger.info(`Reconnection attempt ${this.reconnectAttempts}`,"WebSocket"),this.connect().then(()=>{this._triggerCallbacks("onReconnect",{attempt:this.reconnectAttempts})}).catch(e=>{this.blapy.logger.error(`Reconnection attempt ${this.reconnectAttempts} failed: ${e.message}`,"WebSocket")})},e)}_clearReconnectTimer(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null)}_triggerCallbacks(e,t){this.callbacks[e]&&this.callbacks[e].forEach(n=>{try{n(t)}catch(o){this.blapy.logger.error(`Error in ${e} callback: ${o.message}`,"WebSocket")}})}_generateClientId(){return"blapy_"+Math.random().toString(36).substr(2,9)+"_"+Date.now()}}}();
