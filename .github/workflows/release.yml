name: Release Blapy2 on PR merge to main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check if commit comes from a PR
        id: pr_check
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });
            const merged = prs.data.find(pr => pr.merged_at);
            core.setOutput("is_from_pr", merged ? "true" : "false");

      - name: Exit if not from merged PR
        if: steps.pr_check.outputs.is_from_pr != 'true'
        run: echo "❌ Not a merged PR – skipping release." && exit 0

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm install

      - name: Build Blapy2
        run: npm run build

      - name: Commit built file
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add dist/blapy2.js -f
          git add dist/Blapymotion.js -f
          git add dist/BlapySocket.js -f
          git commit -m "chore: build dist/blapy2.js [skip ci]" || echo "no changes"
          git push

      - name: Install jq (for reading version from package.json)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Bump version + tag
        id: version
        run: |
          LAST_VERSION=$(git tag --sort=-v:refname | tail -n 1)
          if [[ "$LAST_VERSION" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEW_VERSION="v$(jq -r .version package.json)"
          else
            NEW_VERSION="v0.0.1"
          fi
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          files: dist/blapy2.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
